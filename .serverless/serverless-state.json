{
  "service": {
    "service": "reto-api",
    "serviceObject": {
      "name": "reto-api"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs20.x",
      "region": "us-east-1",
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:Query",
                "dynamodb:Scan",
                "dynamodb:GetItem",
                "dynamodb:PutItem"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "FilmTable",
                    "Arn"
                  ]
                }
              ]
            }
          ]
        }
      },
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "HelloLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/reto-api-dev-hello"
            }
          },
          "PeopleLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/reto-api-dev-people"
            }
          },
          "FilmsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/reto-api-dev-films"
            }
          },
          "AddFilmLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/reto-api-dev-addFilm"
            }
          },
          "GetFilmsDBLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/reto-api-dev-getFilmsDB"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "reto-api",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/reto-api-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/reto-api-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Deny",
                        "Action": "logs:PutLogEvents",
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/reto-api-dev-swagger-ui:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/reto-api-dev-swagger-json:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][0]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "reto-api",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "HelloLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/reto-api/dev/1722627606109-2024-08-02T19:40:06.109Z/reto-api.zip"
              },
              "Handler": "src/hello.hello",
              "Runtime": "nodejs20.x",
              "FunctionName": "reto-api-dev-hello",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "NODE_OPTIONS": "--enable-source-maps"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "HelloLogGroup"
            ]
          },
          "PeopleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/reto-api/dev/1722627606109-2024-08-02T19:40:06.109Z/reto-api.zip"
              },
              "Handler": "src/people.people",
              "Runtime": "nodejs20.x",
              "FunctionName": "reto-api-dev-people",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "NODE_OPTIONS": "--enable-source-maps"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "PeopleLogGroup"
            ]
          },
          "FilmsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/reto-api/dev/1722627606109-2024-08-02T19:40:06.109Z/reto-api.zip"
              },
              "Handler": "src/films.films",
              "Runtime": "nodejs20.x",
              "FunctionName": "reto-api-dev-films",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "NODE_OPTIONS": "--enable-source-maps"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "FilmsLogGroup"
            ]
          },
          "AddFilmLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/reto-api/dev/1722627606109-2024-08-02T19:40:06.109Z/reto-api.zip"
              },
              "Handler": "src/addFilm.addFilm",
              "Runtime": "nodejs20.x",
              "FunctionName": "reto-api-dev-addFilm",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "NODE_OPTIONS": "--enable-source-maps"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AddFilmLogGroup"
            ]
          },
          "GetFilmsDBLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/reto-api/dev/1722627606109-2024-08-02T19:40:06.109Z/reto-api.zip"
              },
              "Handler": "src/getFilm.getFilmsDB",
              "Runtime": "nodejs20.x",
              "FunctionName": "reto-api-dev-getFilmsDB",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "NODE_OPTIONS": "--enable-source-maps"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetFilmsDBLogGroup"
            ]
          },
          "SwaggerUILambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/reto-api/dev/1722627606109-2024-08-02T19:40:06.109Z/reto-api.zip"
              },
              "Handler": "swagger/swagger-html.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "reto-api-dev-swagger-ui",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            }
          },
          "SwaggerJSONLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/reto-api/dev/1722627606109-2024-08-02T19:40:06.109Z/reto-api.zip"
              },
              "Handler": "swagger/swagger-json.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "reto-api-dev-swagger-json",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            }
          },
          "HelloLambdaVersion14uI6evbquQBP1IhguzPG7PHEonf2R3XtwStHtvH2s4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "HelloLambdaFunction"
              },
              "CodeSha256": "6xdBHfjukMgeBopsrJbjoVDRoMqaJTYJ5hGU0k1Uazk="
            }
          },
          "PeopleLambdaVersionBGkDEezWYqxm1CXePvA2YzkHHDig2fJ1PdRF5wl6U": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "PeopleLambdaFunction"
              },
              "CodeSha256": "6xdBHfjukMgeBopsrJbjoVDRoMqaJTYJ5hGU0k1Uazk="
            }
          },
          "FilmsLambdaVersion2Z0EDsHgFHM2qdt7nb5MD0hra0wGv4mg3JhoUjmYBJs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "FilmsLambdaFunction"
              },
              "CodeSha256": "6xdBHfjukMgeBopsrJbjoVDRoMqaJTYJ5hGU0k1Uazk="
            }
          },
          "AddFilmLambdaVersionDNFipbIhFbUnB0MUf0NvvD83KKPxowZphW4Rwpt384": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AddFilmLambdaFunction"
              },
              "CodeSha256": "6xdBHfjukMgeBopsrJbjoVDRoMqaJTYJ5hGU0k1Uazk="
            }
          },
          "GetFilmsDBLambdaVersionIMgMgUHFazS4ojRkVTerOt2aoJGshst5T8fp9iGM0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetFilmsDBLambdaFunction"
              },
              "CodeSha256": "6xdBHfjukMgeBopsrJbjoVDRoMqaJTYJ5hGU0k1Uazk="
            }
          },
          "SwaggerUILambdaVersionsif89N2zrVd17gN1Y1UEmCpmuKmPulB3nwuIp8CEMM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SwaggerUILambdaFunction"
              },
              "CodeSha256": "6xdBHfjukMgeBopsrJbjoVDRoMqaJTYJ5hGU0k1Uazk="
            }
          },
          "SwaggerJSONLambdaVersionXl0OM0ajjVOctbdnHAuWURyGkQfTLj9A4kgWOZ8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SwaggerJSONLambdaFunction"
              },
              "CodeSha256": "6xdBHfjukMgeBopsrJbjoVDRoMqaJTYJ5hGU0k1Uazk="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-reto-api",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceApi": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "api",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiCreatefill": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApi"
              },
              "PathPart": "createFill",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodApiCreatefillPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiCreatefill"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AddFilmLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AddFilmLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1722627592756": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodApiCreatefillPost"
            ]
          },
          "AddFilmLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AddFilmLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-reto-api",
              "ProtocolType": "HTTP"
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "HelloLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "HelloLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationHello": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"HelloLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApi": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationHello"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationHello"
          },
          "PeopleLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "PeopleLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationPeople": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"PeopleLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiGetpeople": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/getPeople",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationPeople"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationPeople"
          },
          "FilmsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "FilmsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationFilms": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"FilmsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiGetfilm": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/getFilm",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationFilms"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationFilms"
          },
          "GetFilmsDBLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetFilmsDBLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetFilmsDB": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetFilmsDBLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiGetfilmsbyidIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/getFilmsById/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetFilmsDB"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetFilmsDB"
          },
          "SwaggerUILambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SwaggerUILambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationSwaggerUI": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"SwaggerUILambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetSwagger": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /swagger",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationSwaggerUI"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationSwaggerUI"
          },
          "SwaggerJSONLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SwaggerJSONLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationSwaggerJSON": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"SwaggerJSONLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetSwaggerjson": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /swagger.json",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationSwaggerJSON"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationSwaggerJSON"
          },
          "FilmTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "FilmTable",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-reto-api-dev-ServerlessDeploymentBucketName"
            }
          },
          "HelloLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "HelloLambdaVersion14uI6evbquQBP1IhguzPG7PHEonf2R3XtwStHtvH2s4"
            },
            "Export": {
              "Name": "sls-reto-api-dev-HelloLambdaFunctionQualifiedArn"
            }
          },
          "PeopleLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "PeopleLambdaVersionBGkDEezWYqxm1CXePvA2YzkHHDig2fJ1PdRF5wl6U"
            },
            "Export": {
              "Name": "sls-reto-api-dev-PeopleLambdaFunctionQualifiedArn"
            }
          },
          "FilmsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "FilmsLambdaVersion2Z0EDsHgFHM2qdt7nb5MD0hra0wGv4mg3JhoUjmYBJs"
            },
            "Export": {
              "Name": "sls-reto-api-dev-FilmsLambdaFunctionQualifiedArn"
            }
          },
          "AddFilmLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AddFilmLambdaVersionDNFipbIhFbUnB0MUf0NvvD83KKPxowZphW4Rwpt384"
            },
            "Export": {
              "Name": "sls-reto-api-dev-AddFilmLambdaFunctionQualifiedArn"
            }
          },
          "GetFilmsDBLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetFilmsDBLambdaVersionIMgMgUHFazS4ojRkVTerOt2aoJGshst5T8fp9iGM0"
            },
            "Export": {
              "Name": "sls-reto-api-dev-GetFilmsDBLambdaFunctionQualifiedArn"
            }
          },
          "SwaggerUILambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SwaggerUILambdaVersionsif89N2zrVd17gN1Y1UEmCpmuKmPulB3nwuIp8CEMM"
            },
            "Export": {
              "Name": "sls-reto-api-dev-SwaggerUILambdaFunctionQualifiedArn"
            }
          },
          "SwaggerJSONLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SwaggerJSONLambdaVersionXl0OM0ajjVOctbdnHAuWURyGkQfTLj9A4kgWOZ8"
            },
            "Export": {
              "Name": "sls-reto-api-dev-SwaggerJSONLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-reto-api-dev-ServiceEndpoint"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-reto-api-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-reto-api-dev-HttpApiUrl"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "documentation": {
        "api": {
          "info": {
            "title": "Reto API",
            "version": "1.0.0"
          }
        },
        "models": [
          {
            "name": "Film",
            "description": "A film resource",
            "type": "object",
            "required": [
              "id",
              "title",
              "director",
              "producer"
            ],
            "properties": {
              "id": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "director": {
                "type": "string"
              },
              "producer": {
                "type": "string"
              }
            }
          }
        ],
        "operations": [
          {
            "path": "/api",
            "method": "get",
            "summary": "Get a hello message",
            "description": "Retrieves a simple hello message",
            "responses": {
              "200": {
                "description": "Successful response",
                "schema": {
                  "$ref": "#/models/Film"
                }
              }
            }
          },
          {
            "path": "/api/getPeople",
            "method": "get",
            "summary": "Get a list of people",
            "description": "Retrieves a list of people",
            "responses": {
              "200": {
                "description": "Successful response",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/models/Film"
                  }
                }
              }
            }
          },
          {
            "path": "/api/getFilm",
            "method": "get",
            "summary": "Get a film",
            "description": "Retrieves a film",
            "responses": {
              "200": {
                "description": "Successful response",
                "schema": {
                  "$ref": "#/models/Film"
                }
              }
            }
          },
          {
            "path": "/api/createFill",
            "method": "post",
            "summary": "Create a film",
            "description": "Creates a new film",
            "requestBody": {
              "description": "The film to create",
              "required": true,
              "schema": {
                "$ref": "#/models/Film"
              }
            },
            "responses": {
              "200": {
                "description": "Successful response",
                "schema": {
                  "$ref": "#/models/Film"
                }
              }
            }
          },
          {
            "path": "/api/getFilmsById/{id}",
            "method": "get",
            "summary": "Get a film by ID",
            "description": "Retrieves a film by its ID",
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Successful response",
                "schema": {
                  "$ref": "#/models/Film"
                }
              }
            }
          }
        ]
      }
    },
    "plugins": [
      "serverless-auto-swagger"
    ],
    "pluginsData": {},
    "functions": {
      "hello": {
        "handler": "src/hello.hello",
        "events": [
          {
            "httpApi": {
              "path": "/api",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api"
          }
        ],
        "name": "reto-api-dev-hello",
        "environment": {
          "NODE_OPTIONS": "--enable-source-maps"
        },
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "HelloLambdaVersion14uI6evbquQBP1IhguzPG7PHEonf2R3XtwStHtvH2s4"
      },
      "people": {
        "handler": "src/people.people",
        "events": [
          {
            "httpApi": {
              "path": "/api/getPeople",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/getPeople"
          }
        ],
        "name": "reto-api-dev-people",
        "environment": {
          "NODE_OPTIONS": "--enable-source-maps"
        },
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "PeopleLambdaVersionBGkDEezWYqxm1CXePvA2YzkHHDig2fJ1PdRF5wl6U"
      },
      "films": {
        "handler": "src/films.films",
        "events": [
          {
            "httpApi": {
              "path": "/api/getFilm",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/getFilm"
          }
        ],
        "name": "reto-api-dev-films",
        "environment": {
          "NODE_OPTIONS": "--enable-source-maps"
        },
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "FilmsLambdaVersion2Z0EDsHgFHM2qdt7nb5MD0hra0wGv4mg3JhoUjmYBJs"
      },
      "addFilm": {
        "handler": "src/addFilm.addFilm",
        "events": [
          {
            "http": {
              "path": "api/createFill",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "reto-api-dev-addFilm",
        "environment": {
          "NODE_OPTIONS": "--enable-source-maps"
        },
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "AddFilmLambdaVersionDNFipbIhFbUnB0MUf0NvvD83KKPxowZphW4Rwpt384"
      },
      "getFilmsDB": {
        "handler": "src/getFilm.getFilmsDB",
        "events": [
          {
            "httpApi": {
              "path": "/api/getFilmsById/{id}",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/getFilmsById/{id}"
          }
        ],
        "name": "reto-api-dev-getFilmsDB",
        "environment": {
          "NODE_OPTIONS": "--enable-source-maps"
        },
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetFilmsDBLambdaVersionIMgMgUHFazS4ojRkVTerOt2aoJGshst5T8fp9iGM0"
      },
      "swaggerUI": {
        "name": "reto-api-dev-swagger-ui",
        "handler": "swagger/swagger-html.handler",
        "disableLogs": true,
        "events": [
          {
            "httpApi": {
              "method": "get",
              "path": "/swagger"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/swagger"
          }
        ],
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "SwaggerUILambdaVersionsif89N2zrVd17gN1Y1UEmCpmuKmPulB3nwuIp8CEMM"
      },
      "swaggerJSON": {
        "name": "reto-api-dev-swagger-json",
        "handler": "swagger/swagger-json.handler",
        "disableLogs": true,
        "events": [
          {
            "httpApi": {
              "method": "get",
              "path": "/swagger.json"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/swagger.json"
          }
        ],
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "SwaggerJSONLambdaVersionXl0OM0ajjVOctbdnHAuWURyGkQfTLj9A4kgWOZ8"
      }
    },
    "resources": {
      "Resources": {
        "FilmTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "FilmTable",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            }
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "org": "norbesc",
      "app": "reto-norbesc",
      "service": "reto-api",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "functions": {
        "hello": {
          "$ref": "$[\"service\"][\"functions\"][\"hello\"]"
        },
        "people": {
          "$ref": "$[\"service\"][\"functions\"][\"people\"]"
        },
        "films": {
          "$ref": "$[\"service\"][\"functions\"][\"films\"]"
        },
        "addFilm": {
          "$ref": "$[\"service\"][\"functions\"][\"addFilm\"]"
        },
        "getFilmsDB": {
          "$ref": "$[\"service\"][\"functions\"][\"getFilmsDB\"]"
        }
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      }
    },
    "app": "reto-norbesc",
    "appId": null,
    "org": "norbesc",
    "orgId": null,
    "layers": {}
  },
  "package": {
    "artifactDirectoryName": "serverless/reto-api/dev/1722627606109-2024-08-02T19:40:06.109Z",
    "artifact": "reto-api.zip"
  }
}