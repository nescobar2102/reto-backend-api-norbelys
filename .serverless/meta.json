{
  "C:\\Users\\norbe\\Documents\\reto-backend-api\\reto-api": {
    "versionSfCore": null,
    "versionFramework": "4.1.19",
    "isWithinCompose": false,
    "isCompose": false,
    "composeOrgName": null,
    "composeResolverProviders": {
      "aws": {
        "instance": {
          "credentials": "<REDACTED>",
          "serviceConfigFile": {
            "org": "norbesc",
            "app": "reto-norbesc",
            "service": "reto-api",
            "provider": {
              "name": "aws",
              "runtime": "nodejs20.x",
              "region": "us-east-1",
              "iam": {
                "role": {
                  "statements": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:Query",
                        "dynamodb:Scan",
                        "dynamodb:GetItem",
                        "dynamodb:PutItem"
                      ],
                      "Resource": [
                        {
                          "Fn::GetAtt": [
                            "FilmTable",
                            "Arn"
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              "stage": "dev",
              "versionFunctions": true,
              "compiledCloudFormationTemplate": {
                "AWSTemplateFormatVersion": "2010-09-09",
                "Description": "The AWS CloudFormation template for this Serverless application",
                "Resources": {
                  "ServerlessDeploymentBucket": {
                    "Type": "AWS::S3::Bucket",
                    "Properties": {
                      "BucketEncryption": {
                        "ServerSideEncryptionConfiguration": [
                          {
                            "ServerSideEncryptionByDefault": {
                              "SSEAlgorithm": "AES256"
                            }
                          }
                        ]
                      }
                    }
                  },
                  "ServerlessDeploymentBucketPolicy": {
                    "Type": "AWS::S3::BucketPolicy",
                    "Properties": {
                      "Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "PolicyDocument": {
                        "Statement": [
                          {
                            "Action": "s3:*",
                            "Effect": "Deny",
                            "Principal": "*",
                            "Resource": [
                              {
                                "Fn::Join": [
                                  "",
                                  [
                                    "arn:",
                                    {
                                      "Ref": "AWS::Partition"
                                    },
                                    ":s3:::",
                                    {
                                      "Ref": "ServerlessDeploymentBucket"
                                    },
                                    "/*"
                                  ]
                                ]
                              },
                              {
                                "Fn::Join": [
                                  "",
                                  [
                                    "arn:",
                                    {
                                      "Ref": "AWS::Partition"
                                    },
                                    ":s3:::",
                                    {
                                      "Ref": "ServerlessDeploymentBucket"
                                    }
                                  ]
                                ]
                              }
                            ],
                            "Condition": {
                              "Bool": {
                                "aws:SecureTransport": false
                              }
                            }
                          }
                        ]
                      }
                    }
                  },
                  "AppLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/reto-api-dev-app"
                    }
                  },
                  "PeopleLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/reto-api-dev-people"
                    }
                  },
                  "FilmsLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/reto-api-dev-films"
                    }
                  },
                  "AddFilmLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/reto-api-dev-addFilm"
                    }
                  },
                  "GetFilmsDBLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/reto-api-dev-getFilmsDB"
                    }
                  },
                  "IamRoleLambdaExecution": {
                    "Type": "AWS::IAM::Role",
                    "Properties": {
                      "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                          {
                            "Effect": "Allow",
                            "Principal": {
                              "Service": [
                                "lambda.amazonaws.com"
                              ]
                            },
                            "Action": [
                              "sts:AssumeRole"
                            ]
                          }
                        ]
                      },
                      "Policies": [
                        {
                          "PolicyName": {
                            "Fn::Join": [
                              "-",
                              [
                                "reto-api",
                                "dev",
                                "lambda"
                              ]
                            ]
                          },
                          "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:CreateLogStream",
                                  "logs:CreateLogGroup",
                                  "logs:TagResource"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/reto-api-dev*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:PutLogEvents"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/reto-api-dev*:*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Deny",
                                "Action": "logs:PutLogEvents",
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/reto-api-dev-swagger-ui:*"
                                  },
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/reto-api-dev-swagger-json:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "dynamodb:Query",
                                  "dynamodb:Scan",
                                  "dynamodb:GetItem",
                                  "dynamodb:PutItem"
                                ],
                                "Resource": [
                                  {
                                    "Fn::GetAtt": [
                                      "FilmTable",
                                      "Arn"
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        }
                      ],
                      "Path": "/",
                      "RoleName": {
                        "Fn::Join": [
                          "-",
                          [
                            "reto-api",
                            "dev",
                            {
                              "Ref": "AWS::Region"
                            },
                            "lambdaRole"
                          ]
                        ]
                      }
                    }
                  },
                  "AppLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": {
                          "Ref": "ServerlessDeploymentBucket"
                        },
                        "S3Key": "serverless/reto-api/dev/1722631827242-2024-08-02T20:50:27.242Z/reto-api.zip"
                      },
                      "Handler": "src/app.welcome",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "reto-api-dev-app",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "NODE_OPTIONS": "--enable-source-maps"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "AppLogGroup"
                    ]
                  },
                  "PeopleLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": {
                          "Ref": "ServerlessDeploymentBucket"
                        },
                        "S3Key": "serverless/reto-api/dev/1722631827242-2024-08-02T20:50:27.242Z/reto-api.zip"
                      },
                      "Handler": "src/people.people",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "reto-api-dev-people",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "NODE_OPTIONS": "--enable-source-maps"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "PeopleLogGroup"
                    ]
                  },
                  "FilmsLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": {
                          "Ref": "ServerlessDeploymentBucket"
                        },
                        "S3Key": "serverless/reto-api/dev/1722631827242-2024-08-02T20:50:27.242Z/reto-api.zip"
                      },
                      "Handler": "src/films.films",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "reto-api-dev-films",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "NODE_OPTIONS": "--enable-source-maps"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "FilmsLogGroup"
                    ]
                  },
                  "AddFilmLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": {
                          "Ref": "ServerlessDeploymentBucket"
                        },
                        "S3Key": "serverless/reto-api/dev/1722631827242-2024-08-02T20:50:27.242Z/reto-api.zip"
                      },
                      "Handler": "src/addFilm.addFilm",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "reto-api-dev-addFilm",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "NODE_OPTIONS": "--enable-source-maps"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "AddFilmLogGroup"
                    ]
                  },
                  "GetFilmsDBLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": {
                          "Ref": "ServerlessDeploymentBucket"
                        },
                        "S3Key": "serverless/reto-api/dev/1722631827242-2024-08-02T20:50:27.242Z/reto-api.zip"
                      },
                      "Handler": "src/getFilm.getFilmsDB",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "reto-api-dev-getFilmsDB",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "NODE_OPTIONS": "--enable-source-maps"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetFilmsDBLogGroup"
                    ]
                  },
                  "SwaggerUILambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": {
                          "Ref": "ServerlessDeploymentBucket"
                        },
                        "S3Key": "serverless/reto-api/dev/1722631827242-2024-08-02T20:50:27.242Z/reto-api.zip"
                      },
                      "Handler": "swagger/swagger-html.handler",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "reto-api-dev-swagger-ui",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    }
                  },
                  "SwaggerJSONLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": {
                          "Ref": "ServerlessDeploymentBucket"
                        },
                        "S3Key": "serverless/reto-api/dev/1722631827242-2024-08-02T20:50:27.242Z/reto-api.zip"
                      },
                      "Handler": "swagger/swagger-json.handler",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "reto-api-dev-swagger-json",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    }
                  },
                  "AppLambdaVersionoNXjRkdYDtud5ahAnTLWWl8JVc9KUsC0Pe8gHkXh0w": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "AppLambdaFunction"
                      },
                      "CodeSha256": "NgjjJrmhV7uAuZzds9CTLdg5WSpA5LNVCHMOXpsV094="
                    }
                  },
                  "PeopleLambdaVersionLOk3e3qd1BvefbaQmVtLGurhghHhJSlAjzskVi3ARwo": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "PeopleLambdaFunction"
                      },
                      "CodeSha256": "NgjjJrmhV7uAuZzds9CTLdg5WSpA5LNVCHMOXpsV094="
                    }
                  },
                  "FilmsLambdaVersionUikwPml6rVoNknOjmkFARdJdiJPrYv7M1StnyKiTZ8": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "FilmsLambdaFunction"
                      },
                      "CodeSha256": "NgjjJrmhV7uAuZzds9CTLdg5WSpA5LNVCHMOXpsV094="
                    }
                  },
                  "AddFilmLambdaVersion1oWn3vf6Ilgun9jsJnNigGSwqbAEmP2D6VrQKYgUE": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "AddFilmLambdaFunction"
                      },
                      "CodeSha256": "NgjjJrmhV7uAuZzds9CTLdg5WSpA5LNVCHMOXpsV094="
                    }
                  },
                  "GetFilmsDBLambdaVersioneUNogl8Gp04dyFEfg22fENy58Bm2vVmOa7lcikY2rU": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetFilmsDBLambdaFunction"
                      },
                      "CodeSha256": "NgjjJrmhV7uAuZzds9CTLdg5WSpA5LNVCHMOXpsV094="
                    }
                  },
                  "SwaggerUILambdaVersionCvot4gUVs6TdeTjaxqVnOg6KKLbtYRTFr7YgRl89WY": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "SwaggerUILambdaFunction"
                      },
                      "CodeSha256": "NgjjJrmhV7uAuZzds9CTLdg5WSpA5LNVCHMOXpsV094="
                    }
                  },
                  "SwaggerJSONLambdaVersionC1nV6TyEa388zF6LISFxb4Ql8bHFvuT7d9xMtf19i0": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "SwaggerJSONLambdaFunction"
                      },
                      "CodeSha256": "NgjjJrmhV7uAuZzds9CTLdg5WSpA5LNVCHMOXpsV094="
                    }
                  },
                  "ApiGatewayRestApi": {
                    "Type": "AWS::ApiGateway::RestApi",
                    "Properties": {
                      "Name": "dev-reto-api",
                      "EndpointConfiguration": {
                        "Types": [
                          "EDGE"
                        ]
                      },
                      "Policy": ""
                    }
                  },
                  "ApiGatewayResourceApi": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "api",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceApiCreatefill": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceApi"
                      },
                      "PathPart": "createFill",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodApiCreatefillPost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceApiCreatefill"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "AddFilmLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "AddFilmLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayDeployment1722631817323": {
                    "Type": "AWS::ApiGateway::Deployment",
                    "Properties": {
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "StageName": "dev"
                    },
                    "DependsOn": [
                      "ApiGatewayMethodApiCreatefillPost"
                    ]
                  },
                  "AddFilmLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "AddFilmLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "HttpApi": {
                    "Type": "AWS::ApiGatewayV2::Api",
                    "Properties": {
                      "Name": "dev-reto-api",
                      "ProtocolType": "HTTP"
                    }
                  },
                  "HttpApiStage": {
                    "Type": "AWS::ApiGatewayV2::Stage",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "StageName": "$default",
                      "AutoDeploy": true,
                      "DefaultRouteSettings": {
                        "DetailedMetricsEnabled": false
                      }
                    }
                  },
                  "AppLambdaPermissionHttpApi": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "AppLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "HttpApi"
                            },
                            "/*"
                          ]
                        ]
                      }
                    }
                  },
                  "HttpApiIntegrationApp": {
                    "Type": "AWS::ApiGatewayV2::Integration",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "IntegrationType": "AWS_PROXY",
                      "IntegrationUri": {
                        "Fn::GetAtt": [
                          "AppLambdaFunction",
                          "Arn"
                        ]
                      },
                      "PayloadFormatVersion": "2.0",
                      "TimeoutInMillis": 30000
                    }
                  },
                  "HttpApiRouteGetApi": {
                    "Type": "AWS::ApiGatewayV2::Route",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "RouteKey": "GET /api",
                      "Target": {
                        "Fn::Join": [
                          "/",
                          [
                            "integrations",
                            {
                              "Ref": "HttpApiIntegrationApp"
                            }
                          ]
                        ]
                      }
                    },
                    "DependsOn": "HttpApiIntegrationApp"
                  },
                  "PeopleLambdaPermissionHttpApi": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "PeopleLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "HttpApi"
                            },
                            "/*"
                          ]
                        ]
                      }
                    }
                  },
                  "HttpApiIntegrationPeople": {
                    "Type": "AWS::ApiGatewayV2::Integration",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "IntegrationType": "AWS_PROXY",
                      "IntegrationUri": {
                        "Fn::GetAtt": [
                          "PeopleLambdaFunction",
                          "Arn"
                        ]
                      },
                      "PayloadFormatVersion": "2.0",
                      "TimeoutInMillis": 30000
                    }
                  },
                  "HttpApiRouteGetApiGetpeople": {
                    "Type": "AWS::ApiGatewayV2::Route",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "RouteKey": "GET /api/getPeople",
                      "Target": {
                        "Fn::Join": [
                          "/",
                          [
                            "integrations",
                            {
                              "Ref": "HttpApiIntegrationPeople"
                            }
                          ]
                        ]
                      }
                    },
                    "DependsOn": "HttpApiIntegrationPeople"
                  },
                  "FilmsLambdaPermissionHttpApi": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "FilmsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "HttpApi"
                            },
                            "/*"
                          ]
                        ]
                      }
                    }
                  },
                  "HttpApiIntegrationFilms": {
                    "Type": "AWS::ApiGatewayV2::Integration",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "IntegrationType": "AWS_PROXY",
                      "IntegrationUri": {
                        "Fn::GetAtt": [
                          "FilmsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "PayloadFormatVersion": "2.0",
                      "TimeoutInMillis": 30000
                    }
                  },
                  "HttpApiRouteGetApiGetfilm": {
                    "Type": "AWS::ApiGatewayV2::Route",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "RouteKey": "GET /api/getFilm",
                      "Target": {
                        "Fn::Join": [
                          "/",
                          [
                            "integrations",
                            {
                              "Ref": "HttpApiIntegrationFilms"
                            }
                          ]
                        ]
                      }
                    },
                    "DependsOn": "HttpApiIntegrationFilms"
                  },
                  "GetFilmsDBLambdaPermissionHttpApi": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetFilmsDBLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "HttpApi"
                            },
                            "/*"
                          ]
                        ]
                      }
                    }
                  },
                  "HttpApiIntegrationGetFilmsDB": {
                    "Type": "AWS::ApiGatewayV2::Integration",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "IntegrationType": "AWS_PROXY",
                      "IntegrationUri": {
                        "Fn::GetAtt": [
                          "GetFilmsDBLambdaFunction",
                          "Arn"
                        ]
                      },
                      "PayloadFormatVersion": "2.0",
                      "TimeoutInMillis": 30000
                    }
                  },
                  "HttpApiRouteGetApiGetfilmsbyidIdVar": {
                    "Type": "AWS::ApiGatewayV2::Route",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "RouteKey": "GET /api/getFilmsById/{id}",
                      "Target": {
                        "Fn::Join": [
                          "/",
                          [
                            "integrations",
                            {
                              "Ref": "HttpApiIntegrationGetFilmsDB"
                            }
                          ]
                        ]
                      }
                    },
                    "DependsOn": "HttpApiIntegrationGetFilmsDB"
                  },
                  "SwaggerUILambdaPermissionHttpApi": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "SwaggerUILambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "HttpApi"
                            },
                            "/*"
                          ]
                        ]
                      }
                    }
                  },
                  "HttpApiIntegrationSwaggerUI": {
                    "Type": "AWS::ApiGatewayV2::Integration",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "IntegrationType": "AWS_PROXY",
                      "IntegrationUri": {
                        "Fn::GetAtt": [
                          "SwaggerUILambdaFunction",
                          "Arn"
                        ]
                      },
                      "PayloadFormatVersion": "2.0",
                      "TimeoutInMillis": 30000
                    }
                  },
                  "HttpApiRouteGetSwagger": {
                    "Type": "AWS::ApiGatewayV2::Route",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "RouteKey": "GET /swagger",
                      "Target": {
                        "Fn::Join": [
                          "/",
                          [
                            "integrations",
                            {
                              "Ref": "HttpApiIntegrationSwaggerUI"
                            }
                          ]
                        ]
                      }
                    },
                    "DependsOn": "HttpApiIntegrationSwaggerUI"
                  },
                  "SwaggerJSONLambdaPermissionHttpApi": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "SwaggerJSONLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "HttpApi"
                            },
                            "/*"
                          ]
                        ]
                      }
                    }
                  },
                  "HttpApiIntegrationSwaggerJSON": {
                    "Type": "AWS::ApiGatewayV2::Integration",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "IntegrationType": "AWS_PROXY",
                      "IntegrationUri": {
                        "Fn::GetAtt": [
                          "SwaggerJSONLambdaFunction",
                          "Arn"
                        ]
                      },
                      "PayloadFormatVersion": "2.0",
                      "TimeoutInMillis": 30000
                    }
                  },
                  "HttpApiRouteGetSwaggerjson": {
                    "Type": "AWS::ApiGatewayV2::Route",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "RouteKey": "GET /swagger.json",
                      "Target": {
                        "Fn::Join": [
                          "/",
                          [
                            "integrations",
                            {
                              "Ref": "HttpApiIntegrationSwaggerJSON"
                            }
                          ]
                        ]
                      }
                    },
                    "DependsOn": "HttpApiIntegrationSwaggerJSON"
                  },
                  "FilmTable": {
                    "Type": "AWS::DynamoDB::Table",
                    "Properties": {
                      "TableName": "FilmTable",
                      "AttributeDefinitions": [
                        {
                          "AttributeName": "id",
                          "AttributeType": "S"
                        }
                      ],
                      "KeySchema": [
                        {
                          "AttributeName": "id",
                          "KeyType": "HASH"
                        }
                      ],
                      "ProvisionedThroughput": {
                        "ReadCapacityUnits": 1,
                        "WriteCapacityUnits": 1
                      }
                    }
                  }
                },
                "Outputs": {
                  "ServerlessDeploymentBucketName": {
                    "Value": {
                      "Ref": "ServerlessDeploymentBucket"
                    },
                    "Export": {
                      "Name": "sls-reto-api-dev-ServerlessDeploymentBucketName"
                    }
                  },
                  "AppLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "AppLambdaVersionoNXjRkdYDtud5ahAnTLWWl8JVc9KUsC0Pe8gHkXh0w"
                    },
                    "Export": {
                      "Name": "sls-reto-api-dev-AppLambdaFunctionQualifiedArn"
                    }
                  },
                  "PeopleLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "PeopleLambdaVersionLOk3e3qd1BvefbaQmVtLGurhghHhJSlAjzskVi3ARwo"
                    },
                    "Export": {
                      "Name": "sls-reto-api-dev-PeopleLambdaFunctionQualifiedArn"
                    }
                  },
                  "FilmsLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "FilmsLambdaVersionUikwPml6rVoNknOjmkFARdJdiJPrYv7M1StnyKiTZ8"
                    },
                    "Export": {
                      "Name": "sls-reto-api-dev-FilmsLambdaFunctionQualifiedArn"
                    }
                  },
                  "AddFilmLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "AddFilmLambdaVersion1oWn3vf6Ilgun9jsJnNigGSwqbAEmP2D6VrQKYgUE"
                    },
                    "Export": {
                      "Name": "sls-reto-api-dev-AddFilmLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetFilmsDBLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetFilmsDBLambdaVersioneUNogl8Gp04dyFEfg22fENy58Bm2vVmOa7lcikY2rU"
                    },
                    "Export": {
                      "Name": "sls-reto-api-dev-GetFilmsDBLambdaFunctionQualifiedArn"
                    }
                  },
                  "SwaggerUILambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "SwaggerUILambdaVersionCvot4gUVs6TdeTjaxqVnOg6KKLbtYRTFr7YgRl89WY"
                    },
                    "Export": {
                      "Name": "sls-reto-api-dev-SwaggerUILambdaFunctionQualifiedArn"
                    }
                  },
                  "SwaggerJSONLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "SwaggerJSONLambdaVersionC1nV6TyEa388zF6LISFxb4Ql8bHFvuT7d9xMtf19i0"
                    },
                    "Export": {
                      "Name": "sls-reto-api-dev-SwaggerJSONLambdaFunctionQualifiedArn"
                    }
                  },
                  "ServiceEndpoint": {
                    "Description": "URL of the service endpoint",
                    "Value": {
                      "Fn::Join": [
                        "",
                        [
                          "https://",
                          {
                            "Ref": "ApiGatewayRestApi"
                          },
                          ".execute-api.",
                          {
                            "Ref": "AWS::Region"
                          },
                          ".",
                          {
                            "Ref": "AWS::URLSuffix"
                          },
                          "/dev"
                        ]
                      ]
                    },
                    "Export": {
                      "Name": "sls-reto-api-dev-ServiceEndpoint"
                    }
                  },
                  "HttpApiId": {
                    "Description": "Id of the HTTP API",
                    "Value": {
                      "Ref": "HttpApi"
                    },
                    "Export": {
                      "Name": "sls-reto-api-dev-HttpApiId"
                    }
                  },
                  "HttpApiUrl": {
                    "Description": "URL of the HTTP API",
                    "Value": {
                      "Fn::Join": [
                        "",
                        [
                          "https://",
                          {
                            "Ref": "HttpApi"
                          },
                          ".execute-api.",
                          {
                            "Ref": "AWS::Region"
                          },
                          ".",
                          {
                            "Ref": "AWS::URLSuffix"
                          }
                        ]
                      ]
                    },
                    "Export": {
                      "Name": "sls-reto-api-dev-HttpApiUrl"
                    }
                  }
                }
              },
              "coreCloudFormationTemplate": {
                "AWSTemplateFormatVersion": "2010-09-09",
                "Description": "The AWS CloudFormation template for this Serverless application",
                "Resources": {
                  "ServerlessDeploymentBucket": {
                    "Type": "AWS::S3::Bucket",
                    "Properties": {
                      "BucketEncryption": {
                        "ServerSideEncryptionConfiguration": [
                          {
                            "ServerSideEncryptionByDefault": {
                              "SSEAlgorithm": "AES256"
                            }
                          }
                        ]
                      }
                    }
                  },
                  "ServerlessDeploymentBucketPolicy": {
                    "Type": "AWS::S3::BucketPolicy",
                    "Properties": {
                      "Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "PolicyDocument": {
                        "Statement": [
                          {
                            "Action": "s3:*",
                            "Effect": "Deny",
                            "Principal": "*",
                            "Resource": [
                              {
                                "Fn::Join": [
                                  "",
                                  [
                                    "arn:",
                                    {
                                      "Ref": "AWS::Partition"
                                    },
                                    ":s3:::",
                                    {
                                      "Ref": "ServerlessDeploymentBucket"
                                    },
                                    "/*"
                                  ]
                                ]
                              },
                              {
                                "Fn::Join": [
                                  "",
                                  [
                                    "arn:",
                                    {
                                      "Ref": "AWS::Partition"
                                    },
                                    ":s3:::",
                                    {
                                      "Ref": "ServerlessDeploymentBucket"
                                    }
                                  ]
                                ]
                              }
                            ],
                            "Condition": {
                              "Bool": {
                                "aws:SecureTransport": false
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                },
                "Outputs": {
                  "ServerlessDeploymentBucketName": {
                    "Value": {
                      "Ref": "ServerlessDeploymentBucket"
                    }
                  }
                }
              },
              "vpc": {}
            },
            "plugins": [
              "serverless-auto-swagger"
            ],
            "functions": {
              "app": {
                "handler": "src/app.welcome",
                "events": [
                  {
                    "httpApi": {
                      "path": "/api",
                      "method": "get"
                    },
                    "resolvedMethod": "GET",
                    "resolvedPath": "/api"
                  }
                ],
                "name": "reto-api-dev-app",
                "environment": {
                  "NODE_OPTIONS": "--enable-source-maps"
                },
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "AppLambdaVersionoNXjRkdYDtud5ahAnTLWWl8JVc9KUsC0Pe8gHkXh0w"
              },
              "people": {
                "handler": "src/people.people",
                "events": [
                  {
                    "httpApi": {
                      "path": "/api/getPeople",
                      "method": "get"
                    },
                    "resolvedMethod": "GET",
                    "resolvedPath": "/api/getPeople"
                  }
                ],
                "name": "reto-api-dev-people",
                "environment": {
                  "NODE_OPTIONS": "--enable-source-maps"
                },
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "PeopleLambdaVersionLOk3e3qd1BvefbaQmVtLGurhghHhJSlAjzskVi3ARwo"
              },
              "films": {
                "handler": "src/films.films",
                "events": [
                  {
                    "httpApi": {
                      "path": "/api/getFilm",
                      "method": "get"
                    },
                    "resolvedMethod": "GET",
                    "resolvedPath": "/api/getFilm"
                  }
                ],
                "name": "reto-api-dev-films",
                "environment": {
                  "NODE_OPTIONS": "--enable-source-maps"
                },
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "FilmsLambdaVersionUikwPml6rVoNknOjmkFARdJdiJPrYv7M1StnyKiTZ8"
              },
              "addFilm": {
                "handler": "src/addFilm.addFilm",
                "events": [
                  {
                    "http": {
                      "path": "api/createFill",
                      "method": "post",
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "reto-api-dev-addFilm",
                "environment": {
                  "NODE_OPTIONS": "--enable-source-maps"
                },
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "AddFilmLambdaVersion1oWn3vf6Ilgun9jsJnNigGSwqbAEmP2D6VrQKYgUE"
              },
              "getFilmsDB": {
                "handler": "src/getFilm.getFilmsDB",
                "events": [
                  {
                    "httpApi": {
                      "path": "/api/getFilmsById/{id}",
                      "method": "get"
                    },
                    "resolvedMethod": "GET",
                    "resolvedPath": "/api/getFilmsById/{id}"
                  }
                ],
                "name": "reto-api-dev-getFilmsDB",
                "environment": {
                  "NODE_OPTIONS": "--enable-source-maps"
                },
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "GetFilmsDBLambdaVersioneUNogl8Gp04dyFEfg22fENy58Bm2vVmOa7lcikY2rU"
              }
            },
            "resources": {
              "Resources": {
                "FilmTable": {
                  "Type": "AWS::DynamoDB::Table",
                  "Properties": {
                    "TableName": "FilmTable",
                    "AttributeDefinitions": [
                      {
                        "AttributeName": "id",
                        "AttributeType": "S"
                      }
                    ],
                    "KeySchema": [
                      {
                        "AttributeName": "id",
                        "KeyType": "HASH"
                      }
                    ],
                    "ProvisionedThroughput": {
                      "ReadCapacityUnits": 1,
                      "WriteCapacityUnits": 1
                    }
                  }
                }
              },
              "Outputs": {}
            },
            "custom": {
              "documentation": {
                "api": {
                  "info": {
                    "title": "Reto API",
                    "version": "1.0.0"
                  }
                },
                "models": [
                  {
                    "name": "Film",
                    "description": "A film resource",
                    "type": "object",
                    "required": [
                      "id",
                      "title",
                      "director",
                      "producer"
                    ],
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "title": {
                        "type": "string"
                      },
                      "director": {
                        "type": "string"
                      },
                      "producer": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "operations": [
                  {
                    "path": "/api",
                    "method": "get",
                    "summary": "Get  message to welcome",
                    "description": "Retrieves a simple welcome message",
                    "responses": {
                      "200": {
                        "description": "Successful response",
                        "schema": {
                          "$ref": "#/models/Film"
                        }
                      }
                    }
                  },
                  {
                    "path": "/api/getPeople",
                    "method": "get",
                    "summary": "Get a list of people",
                    "description": "Retrieves a list of people",
                    "responses": {
                      "200": {
                        "description": "Successful response",
                        "schema": {
                          "type": "array",
                          "items": {
                            "$ref": "#/models/Film"
                          }
                        }
                      }
                    }
                  },
                  {
                    "path": "/api/getFilm",
                    "method": "get",
                    "summary": "Get a film",
                    "description": "Retrieves a film",
                    "responses": {
                      "200": {
                        "description": "Successful response",
                        "schema": {
                          "$ref": "#/models/Film"
                        }
                      }
                    }
                  },
                  {
                    "path": "/api/createFill",
                    "method": "post",
                    "summary": "Create a film",
                    "description": "Creates a new film",
                    "requestBody": {
                      "description": "The film to create",
                      "required": true,
                      "schema": {
                        "$ref": "#/components/schemas/Film"
                      }
                    },
                    "responses": {
                      "200": {
                        "description": "Successful response",
                        "schema": {
                          "Film": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "title": {
                                "type": "string"
                              },
                              "producer": {
                                "type": "string"
                              },
                              "director": {
                                "type": "string"
                              },
                              "createdAt": {
                                "type": "integer"
                              },
                              "done": {
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  {
                    "path": "/api/getFilmsById/{id}",
                    "method": "get",
                    "summary": "Get a film by ID",
                    "description": "Retrieves a film by its ID",
                    "parameters": [
                      {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                          "type": "string"
                        }
                      }
                    ],
                    "responses": {
                      "200": {
                        "description": "Successful response",
                        "schema": {
                          "$ref": "#/models/Film"
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          "configFileDirPath": "C:\\Users\\norbe\\Documents\\reto-backend-api\\reto-api",
          "config": {
            "type": "aws"
          },
          "options": {},
          "stage": "dev",
          "dashboard": null,
          "isDefaultConfig": true
        },
        "resolvers": {}
      }
    },
    "composeServiceName": null,
    "servicePath": "C:\\Users\\norbe\\Documents\\reto-backend-api\\reto-api",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "org": "norbesc",
      "app": "reto-norbesc",
      "service": "reto-api",
      "provider": {
        "name": "aws",
        "runtime": "nodejs20.x",
        "region": "us-east-1",
        "iam": {
          "role": {
            "statements": [
              {
                "Effect": "Allow",
                "Action": [
                  "dynamodb:Query",
                  "dynamodb:Scan",
                  "dynamodb:GetItem",
                  "dynamodb:PutItem"
                ],
                "Resource": [
                  {
                    "Fn::GetAtt": [
                      "FilmTable",
                      "Arn"
                    ]
                  }
                ]
              }
            ]
          }
        },
        "stage": "dev",
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "ServerlessDeploymentBucket": {
              "Type": "AWS::S3::Bucket",
              "Properties": {
                "BucketEncryption": {
                  "ServerSideEncryptionConfiguration": [
                    {
                      "ServerSideEncryptionByDefault": {
                        "SSEAlgorithm": "AES256"
                      }
                    }
                  ]
                }
              }
            },
            "ServerlessDeploymentBucketPolicy": {
              "Type": "AWS::S3::BucketPolicy",
              "Properties": {
                "Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Action": "s3:*",
                      "Effect": "Deny",
                      "Principal": "*",
                      "Resource": [
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              },
                              "/*"
                            ]
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              }
                            ]
                          ]
                        }
                      ],
                      "Condition": {
                        "Bool": {
                          "aws:SecureTransport": false
                        }
                      }
                    }
                  ]
                }
              }
            },
            "AppLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/reto-api-dev-app"
              }
            },
            "PeopleLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/reto-api-dev-people"
              }
            },
            "FilmsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/reto-api-dev-films"
              }
            },
            "AddFilmLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/reto-api-dev-addFilm"
              }
            },
            "GetFilmsDBLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/reto-api-dev-getFilmsDB"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "reto-api",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/reto-api-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/reto-api-dev*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Deny",
                          "Action": "logs:PutLogEvents",
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/reto-api-dev-swagger-ui:*"
                            },
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/reto-api-dev-swagger-json:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "dynamodb:Query",
                            "dynamodb:Scan",
                            "dynamodb:GetItem",
                            "dynamodb:PutItem"
                          ],
                          "Resource": [
                            {
                              "Fn::GetAtt": [
                                "FilmTable",
                                "Arn"
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "reto-api",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "AppLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/reto-api/dev/1722631827242-2024-08-02T20:50:27.242Z/reto-api.zip"
                },
                "Handler": "src/app.welcome",
                "Runtime": "nodejs20.x",
                "FunctionName": "reto-api-dev-app",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "NODE_OPTIONS": "--enable-source-maps"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "AppLogGroup"
              ]
            },
            "PeopleLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/reto-api/dev/1722631827242-2024-08-02T20:50:27.242Z/reto-api.zip"
                },
                "Handler": "src/people.people",
                "Runtime": "nodejs20.x",
                "FunctionName": "reto-api-dev-people",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "NODE_OPTIONS": "--enable-source-maps"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "PeopleLogGroup"
              ]
            },
            "FilmsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/reto-api/dev/1722631827242-2024-08-02T20:50:27.242Z/reto-api.zip"
                },
                "Handler": "src/films.films",
                "Runtime": "nodejs20.x",
                "FunctionName": "reto-api-dev-films",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "NODE_OPTIONS": "--enable-source-maps"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "FilmsLogGroup"
              ]
            },
            "AddFilmLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/reto-api/dev/1722631827242-2024-08-02T20:50:27.242Z/reto-api.zip"
                },
                "Handler": "src/addFilm.addFilm",
                "Runtime": "nodejs20.x",
                "FunctionName": "reto-api-dev-addFilm",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "NODE_OPTIONS": "--enable-source-maps"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "AddFilmLogGroup"
              ]
            },
            "GetFilmsDBLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/reto-api/dev/1722631827242-2024-08-02T20:50:27.242Z/reto-api.zip"
                },
                "Handler": "src/getFilm.getFilmsDB",
                "Runtime": "nodejs20.x",
                "FunctionName": "reto-api-dev-getFilmsDB",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "NODE_OPTIONS": "--enable-source-maps"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetFilmsDBLogGroup"
              ]
            },
            "SwaggerUILambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/reto-api/dev/1722631827242-2024-08-02T20:50:27.242Z/reto-api.zip"
                },
                "Handler": "swagger/swagger-html.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "reto-api-dev-swagger-ui",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              }
            },
            "SwaggerJSONLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/reto-api/dev/1722631827242-2024-08-02T20:50:27.242Z/reto-api.zip"
                },
                "Handler": "swagger/swagger-json.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "reto-api-dev-swagger-json",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              }
            },
            "AppLambdaVersionoNXjRkdYDtud5ahAnTLWWl8JVc9KUsC0Pe8gHkXh0w": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "AppLambdaFunction"
                },
                "CodeSha256": "NgjjJrmhV7uAuZzds9CTLdg5WSpA5LNVCHMOXpsV094="
              }
            },
            "PeopleLambdaVersionLOk3e3qd1BvefbaQmVtLGurhghHhJSlAjzskVi3ARwo": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "PeopleLambdaFunction"
                },
                "CodeSha256": "NgjjJrmhV7uAuZzds9CTLdg5WSpA5LNVCHMOXpsV094="
              }
            },
            "FilmsLambdaVersionUikwPml6rVoNknOjmkFARdJdiJPrYv7M1StnyKiTZ8": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "FilmsLambdaFunction"
                },
                "CodeSha256": "NgjjJrmhV7uAuZzds9CTLdg5WSpA5LNVCHMOXpsV094="
              }
            },
            "AddFilmLambdaVersion1oWn3vf6Ilgun9jsJnNigGSwqbAEmP2D6VrQKYgUE": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "AddFilmLambdaFunction"
                },
                "CodeSha256": "NgjjJrmhV7uAuZzds9CTLdg5WSpA5LNVCHMOXpsV094="
              }
            },
            "GetFilmsDBLambdaVersioneUNogl8Gp04dyFEfg22fENy58Bm2vVmOa7lcikY2rU": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetFilmsDBLambdaFunction"
                },
                "CodeSha256": "NgjjJrmhV7uAuZzds9CTLdg5WSpA5LNVCHMOXpsV094="
              }
            },
            "SwaggerUILambdaVersionCvot4gUVs6TdeTjaxqVnOg6KKLbtYRTFr7YgRl89WY": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "SwaggerUILambdaFunction"
                },
                "CodeSha256": "NgjjJrmhV7uAuZzds9CTLdg5WSpA5LNVCHMOXpsV094="
              }
            },
            "SwaggerJSONLambdaVersionC1nV6TyEa388zF6LISFxb4Ql8bHFvuT7d9xMtf19i0": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "SwaggerJSONLambdaFunction"
                },
                "CodeSha256": "NgjjJrmhV7uAuZzds9CTLdg5WSpA5LNVCHMOXpsV094="
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-reto-api",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceApi": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "api",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceApiCreatefill": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceApi"
                },
                "PathPart": "createFill",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodApiCreatefillPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceApiCreatefill"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "AddFilmLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AddFilmLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayDeployment1722631817323": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodApiCreatefillPost"
              ]
            },
            "AddFilmLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "AddFilmLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "HttpApi": {
              "Type": "AWS::ApiGatewayV2::Api",
              "Properties": {
                "Name": "dev-reto-api",
                "ProtocolType": "HTTP"
              }
            },
            "HttpApiStage": {
              "Type": "AWS::ApiGatewayV2::Stage",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "StageName": "$default",
                "AutoDeploy": true,
                "DefaultRouteSettings": {
                  "DetailedMetricsEnabled": false
                }
              }
            },
            "AppLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "AppLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationApp": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "AppLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetApi": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /api",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationApp"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationApp"
            },
            "PeopleLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "PeopleLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationPeople": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "PeopleLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetApiGetpeople": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /api/getPeople",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationPeople"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationPeople"
            },
            "FilmsLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "FilmsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationFilms": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "FilmsLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetApiGetfilm": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /api/getFilm",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationFilms"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationFilms"
            },
            "GetFilmsDBLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetFilmsDBLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetFilmsDB": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetFilmsDBLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetApiGetfilmsbyidIdVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /api/getFilmsById/{id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetFilmsDB"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetFilmsDB"
            },
            "SwaggerUILambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "SwaggerUILambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationSwaggerUI": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "SwaggerUILambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetSwagger": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /swagger",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationSwaggerUI"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationSwaggerUI"
            },
            "SwaggerJSONLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "SwaggerJSONLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationSwaggerJSON": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "SwaggerJSONLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetSwaggerjson": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /swagger.json",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationSwaggerJSON"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationSwaggerJSON"
            },
            "FilmTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "FilmTable",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "id",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "id",
                    "KeyType": "HASH"
                  }
                ],
                "ProvisionedThroughput": {
                  "ReadCapacityUnits": 1,
                  "WriteCapacityUnits": 1
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "Export": {
                "Name": "sls-reto-api-dev-ServerlessDeploymentBucketName"
              }
            },
            "AppLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "AppLambdaVersionoNXjRkdYDtud5ahAnTLWWl8JVc9KUsC0Pe8gHkXh0w"
              },
              "Export": {
                "Name": "sls-reto-api-dev-AppLambdaFunctionQualifiedArn"
              }
            },
            "PeopleLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "PeopleLambdaVersionLOk3e3qd1BvefbaQmVtLGurhghHhJSlAjzskVi3ARwo"
              },
              "Export": {
                "Name": "sls-reto-api-dev-PeopleLambdaFunctionQualifiedArn"
              }
            },
            "FilmsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "FilmsLambdaVersionUikwPml6rVoNknOjmkFARdJdiJPrYv7M1StnyKiTZ8"
              },
              "Export": {
                "Name": "sls-reto-api-dev-FilmsLambdaFunctionQualifiedArn"
              }
            },
            "AddFilmLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "AddFilmLambdaVersion1oWn3vf6Ilgun9jsJnNigGSwqbAEmP2D6VrQKYgUE"
              },
              "Export": {
                "Name": "sls-reto-api-dev-AddFilmLambdaFunctionQualifiedArn"
              }
            },
            "GetFilmsDBLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetFilmsDBLambdaVersioneUNogl8Gp04dyFEfg22fENy58Bm2vVmOa7lcikY2rU"
              },
              "Export": {
                "Name": "sls-reto-api-dev-GetFilmsDBLambdaFunctionQualifiedArn"
              }
            },
            "SwaggerUILambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "SwaggerUILambdaVersionCvot4gUVs6TdeTjaxqVnOg6KKLbtYRTFr7YgRl89WY"
              },
              "Export": {
                "Name": "sls-reto-api-dev-SwaggerUILambdaFunctionQualifiedArn"
              }
            },
            "SwaggerJSONLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "SwaggerJSONLambdaVersionC1nV6TyEa388zF6LISFxb4Ql8bHFvuT7d9xMtf19i0"
              },
              "Export": {
                "Name": "sls-reto-api-dev-SwaggerJSONLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-reto-api-dev-ServiceEndpoint"
              }
            },
            "HttpApiId": {
              "Description": "Id of the HTTP API",
              "Value": {
                "Ref": "HttpApi"
              },
              "Export": {
                "Name": "sls-reto-api-dev-HttpApiId"
              }
            },
            "HttpApiUrl": {
              "Description": "URL of the HTTP API",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "HttpApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    }
                  ]
                ]
              },
              "Export": {
                "Name": "sls-reto-api-dev-HttpApiUrl"
              }
            }
          }
        },
        "coreCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "ServerlessDeploymentBucket": {
              "Type": "AWS::S3::Bucket",
              "Properties": {
                "BucketEncryption": {
                  "ServerSideEncryptionConfiguration": [
                    {
                      "ServerSideEncryptionByDefault": {
                        "SSEAlgorithm": "AES256"
                      }
                    }
                  ]
                }
              }
            },
            "ServerlessDeploymentBucketPolicy": {
              "Type": "AWS::S3::BucketPolicy",
              "Properties": {
                "Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Action": "s3:*",
                      "Effect": "Deny",
                      "Principal": "*",
                      "Resource": [
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              },
                              "/*"
                            ]
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              }
                            ]
                          ]
                        }
                      ],
                      "Condition": {
                        "Bool": {
                          "aws:SecureTransport": false
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": {
                "Ref": "ServerlessDeploymentBucket"
              }
            }
          }
        },
        "vpc": {}
      },
      "plugins": [
        "serverless-auto-swagger"
      ],
      "functions": {
        "app": {
          "handler": "src/app.welcome",
          "events": [
            {
              "httpApi": {
                "path": "/api",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/api"
            }
          ],
          "name": "reto-api-dev-app",
          "environment": {
            "NODE_OPTIONS": "--enable-source-maps"
          },
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "AppLambdaVersionoNXjRkdYDtud5ahAnTLWWl8JVc9KUsC0Pe8gHkXh0w"
        },
        "people": {
          "handler": "src/people.people",
          "events": [
            {
              "httpApi": {
                "path": "/api/getPeople",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/api/getPeople"
            }
          ],
          "name": "reto-api-dev-people",
          "environment": {
            "NODE_OPTIONS": "--enable-source-maps"
          },
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "PeopleLambdaVersionLOk3e3qd1BvefbaQmVtLGurhghHhJSlAjzskVi3ARwo"
        },
        "films": {
          "handler": "src/films.films",
          "events": [
            {
              "httpApi": {
                "path": "/api/getFilm",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/api/getFilm"
            }
          ],
          "name": "reto-api-dev-films",
          "environment": {
            "NODE_OPTIONS": "--enable-source-maps"
          },
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "FilmsLambdaVersionUikwPml6rVoNknOjmkFARdJdiJPrYv7M1StnyKiTZ8"
        },
        "addFilm": {
          "handler": "src/addFilm.addFilm",
          "events": [
            {
              "http": {
                "path": "api/createFill",
                "method": "post",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "reto-api-dev-addFilm",
          "environment": {
            "NODE_OPTIONS": "--enable-source-maps"
          },
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "AddFilmLambdaVersion1oWn3vf6Ilgun9jsJnNigGSwqbAEmP2D6VrQKYgUE"
        },
        "getFilmsDB": {
          "handler": "src/getFilm.getFilmsDB",
          "events": [
            {
              "httpApi": {
                "path": "/api/getFilmsById/{id}",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/api/getFilmsById/{id}"
            }
          ],
          "name": "reto-api-dev-getFilmsDB",
          "environment": {
            "NODE_OPTIONS": "--enable-source-maps"
          },
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetFilmsDBLambdaVersioneUNogl8Gp04dyFEfg22fENy58Bm2vVmOa7lcikY2rU"
        }
      },
      "resources": {
        "Resources": {
          "FilmTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "FilmTable",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              }
            }
          }
        },
        "Outputs": {}
      },
      "custom": {
        "documentation": {
          "api": {
            "info": {
              "title": "Reto API",
              "version": "1.0.0"
            }
          },
          "models": [
            {
              "name": "Film",
              "description": "A film resource",
              "type": "object",
              "required": [
                "id",
                "title",
                "director",
                "producer"
              ],
              "properties": {
                "id": {
                  "type": "string"
                },
                "title": {
                  "type": "string"
                },
                "director": {
                  "type": "string"
                },
                "producer": {
                  "type": "string"
                }
              }
            }
          ],
          "operations": [
            {
              "path": "/api",
              "method": "get",
              "summary": "Get  message to welcome",
              "description": "Retrieves a simple welcome message",
              "responses": {
                "200": {
                  "description": "Successful response",
                  "schema": {
                    "$ref": "#/models/Film"
                  }
                }
              }
            },
            {
              "path": "/api/getPeople",
              "method": "get",
              "summary": "Get a list of people",
              "description": "Retrieves a list of people",
              "responses": {
                "200": {
                  "description": "Successful response",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/models/Film"
                    }
                  }
                }
              }
            },
            {
              "path": "/api/getFilm",
              "method": "get",
              "summary": "Get a film",
              "description": "Retrieves a film",
              "responses": {
                "200": {
                  "description": "Successful response",
                  "schema": {
                    "$ref": "#/models/Film"
                  }
                }
              }
            },
            {
              "path": "/api/createFill",
              "method": "post",
              "summary": "Create a film",
              "description": "Creates a new film",
              "requestBody": {
                "description": "The film to create",
                "required": true,
                "schema": {
                  "$ref": "#/components/schemas/Film"
                }
              },
              "responses": {
                "200": {
                  "description": "Successful response",
                  "schema": {
                    "Film": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "title": {
                          "type": "string"
                        },
                        "producer": {
                          "type": "string"
                        },
                        "director": {
                          "type": "string"
                        },
                        "createdAt": {
                          "type": "integer"
                        },
                        "done": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "path": "/api/getFilmsById/{id}",
              "method": "get",
              "summary": "Get a film by ID",
              "description": "Retrieves a film by its ID",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "Successful response",
                  "schema": {
                    "$ref": "#/models/Film"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "serviceRawFile": "org: norbesc\napp: reto-norbesc\nservice: reto-api\n\nprovider:\n  name: aws\n  runtime: nodejs20.x\n  region: us-east-1\n\n  iam:\n    role:\n      statements:\n        - Effect: Allow\n          Action:\n            - dynamodb:Query\n            - dynamodb:Scan\n            - dynamodb:GetItem\n            - dynamodb:PutItem\n          Resource:\n            - Fn::GetAtt: [FilmTable, Arn]\n\nplugins:\n  - serverless-auto-swagger\n\nfunctions:\n  app:\n    handler: src/app.welcome\n    events:\n      - httpApi:\n          path: /api\n          method: get\n  people:\n    handler: src/people.people\n    events:\n      - httpApi:\n          path: /api/getPeople\n          method: get\n  films:\n    handler: src/films.films\n    events:\n      - httpApi:\n          path: /api/getFilm\n          method: get\n  addFilm:\n    handler: src/addFilm.addFilm\n    events:\n      - http:\n          path: /api/createFill\n          method: post\n  getFilmsDB:\n    handler: src/getFilm.getFilmsDB\n    events:\n      - httpApi:\n          path: /api/getFilmsById/{id}\n          method: get\n\nresources:\n  Resources:\n    FilmTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: FilmTable\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n\ncustom:\n  documentation:\n    api:\n      info:\n        title: Reto API\n        version: 1.0.0\n    models:\n      - name: Film\n        description: A film resource\n        type: object\n        required:\n          - id\n          - title\n          - director\n          - producer\n        properties:\n          id:\n            type: string\n          title:\n            type: string\n          director:\n            type: string\n          producer:\n            type: string\n    operations:\n      - path: /api\n        method: get\n        summary: Get  message to welcome\n        description: Retrieves a simple welcome message\n        responses:\n          '200':\n            description: Successful response\n            schema:\n              $ref: '#/models/Film'\n      - path: /api/getPeople\n        method: get\n        summary: Get a list of people\n        description: Retrieves a list of people\n        responses:\n          '200':\n            description: Successful response\n            schema:\n              type: array\n              items:\n                $ref: '#/models/Film'\n      - path: /api/getFilm\n        method: get\n        summary: Get a film\n        description: Retrieves a film\n        responses:\n          '200':\n            description: Successful response\n            schema:\n              $ref: '#/models/Film'\n      - path: /api/createFill\n        method: post\n        summary: Create a film\n        description: Creates a new film\n        requestBody:\n          description: The film to create\n          required: true\n          schema:\n            $ref: '#/components/schemas/Film'\n        responses:\n          '200':\n            description: Successful response\n            schema: \n              Film:\n                type: object\n                properties:\n                  id:\n                    type: string\n                  title:\n                    type: string\n                  producer:\n                    type: string\n                  director:\n                    type: string\n                  createdAt:\n                    type: integer\n                  done:\n                    type: boolean\n      - path: /api/getFilmsById/{id}\n        method: get\n        summary: Get a film by ID\n        description: Retrieves a film by its ID\n        parameters:\n          - name: id\n            in: path\n            required: true\n            schema:\n              type: string\n        responses:\n          '200':\n            description: Successful response\n            schema:\n              $ref: '#/models/Film'\n ",
    "command": [
      "deploy"
    ],
    "options": {},
    "error": null,
    "params": {},
    "machineId": "8d56605af4bcb22f00ae6f1675469b39",
    "accessKeyV2": "<REDACTED>",
    "accessKeyV1": "<REDACTED>",
    "orgId": "4a6d82f1-3d83-4080-927e-dc3aa265e747",
    "orgName": "norbesc",
    "userId": "Vy1KyVCWMGhgk4pXTp",
    "dashboard": {
      "isEnabledForService": true,
      "requiredAuthentication": false,
      "orgFeaturesInUse": {
        "providers": false,
        "monitoring": true
      },
      "orgObservabilityIntegrations": [
        {
          "integrationId": "kUy1rCvutUF8TzW49edQRp",
          "awsAccountId": "992107617327",
          "status": "alive"
        }
      ],
      "serviceAppId": "tm8wXYnzQ4F9GG5GbF",
      "serviceProvider": null,
      "instanceParameters": null
    },
    "userName": "norbesc",
    "subscription": null,
    "userEmail": "norbelysnaguanagua21@gmail.com",
    "serviceProviderAwsCredentials": "<REDACTED>",
    "serviceProviderAwsAccountId": "992107617327",
    "versionSf": "4.1.19",
    "serviceProviderAwsCfStackName": "reto-api-dev",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-1:992107617327:stack/reto-api-dev/bee3c110-4fa5-11ef-aa15-0ee04242ff75",
    "serviceProviderAwsCfStackCreated": "2024-08-01T01:31:16.303Z",
    "serviceProviderAwsCfStackUpdated": "2024-08-02T20:50:56.291Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "PeopleLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:992107617327:function:reto-api-dev-people:33",
        "Description": "Current Lambda function version",
        "ExportName": "sls-reto-api-dev-PeopleLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "FilmsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:992107617327:function:reto-api-dev-films:29",
        "Description": "Current Lambda function version",
        "ExportName": "sls-reto-api-dev-FilmsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "AddFilmLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:992107617327:function:reto-api-dev-addFilm:19",
        "Description": "Current Lambda function version",
        "ExportName": "sls-reto-api-dev-AddFilmLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "SwaggerJSONLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:992107617327:function:reto-api-dev-swagger-json:7",
        "Description": "Current Lambda function version",
        "ExportName": "sls-reto-api-dev-SwaggerJSONLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "SwaggerUILambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:992107617327:function:reto-api-dev-swagger-ui:7",
        "Description": "Current Lambda function version",
        "ExportName": "sls-reto-api-dev-SwaggerUILambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "AppLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:992107617327:function:reto-api-dev-app:3",
        "Description": "Current Lambda function version",
        "ExportName": "sls-reto-api-dev-AppLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "HttpApiId",
        "OutputValue": "28uavivzi5",
        "Description": "Id of the HTTP API",
        "ExportName": "sls-reto-api-dev-HttpApiId"
      },
      {
        "OutputKey": "GetFilmsDBLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:992107617327:function:reto-api-dev-getFilmsDB:13",
        "Description": "Current Lambda function version",
        "ExportName": "sls-reto-api-dev-GetFilmsDBLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://e8ajzskczh.execute-api.us-east-1.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-reto-api-dev-ServiceEndpoint"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "reto-api-dev-serverlessdeploymentbucket-ms2euidm0jge",
        "ExportName": "sls-reto-api-dev-ServerlessDeploymentBucketName"
      },
      {
        "OutputKey": "HttpApiUrl",
        "OutputValue": "https://28uavivzi5.execute-api.us-east-1.amazonaws.com",
        "Description": "URL of the HTTP API",
        "ExportName": "sls-reto-api-dev-HttpApiUrl"
      }
    ]
  }
}